(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{151:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return u}));var a=t(2),i=(t(0),t(173));t(174),t(175);const r={title:"Adding a Very Simple AI to Units",author:"wigguno",steamId:"76561198004447135",date:"27.07.2015"},o={id:"units/adding-a-very-simple-ai-to-units",title:"Adding a Very Simple AI to Units",description:"This tutorial will cover how to issue very simple orders to units. This tutorial uses a move order to make a unit wander inside an area randomly, and a cast order to make a unit cast an untargeted spell randomly.",source:"@site/_articles/units/adding-a-very-simple-ai-to-units.md",permalink:"/units/adding-a-very-simple-ai-to-units",editUrl:"https://github.com/ModDota/moddota.github.io/edit/source/_articles/units/adding-a-very-simple-ai-to-units.md",sidebar:"docs",previous:{title:"Creating units with a duration",permalink:"/units/creating-units-with-a-duration"},next:{title:"Writing a simple AI for neutrals",permalink:"/units/simple-neutral-ai"}},s=[{value:"Drawbacks",id:"drawbacks",children:[]},{value:"References",id:"references",children:[]},{value:"Hammer Setup",id:"hammer-setup",children:[]},{value:"Lua Setup",id:"lua-setup",children:[]},{value:"Spawning a Wanderer",id:"spawning-a-wanderer",children:[]},{value:"Spawning a Caster",id:"spawning-a-caster",children:[]},{value:"Thinker Function",id:"thinker-function",children:[]},{value:"Finishing Up",id:"finishing-up",children:[]}],l={rightToc:s};function u({components:e,...n}){return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This tutorial will cover how to issue very simple orders to units. This tutorial uses a move order to make a unit wander inside an area randomly, and a cast order to make a unit cast an untargeted spell randomly."),Object(i.b)("p",null,"This tutorial assumes a basic knowledge of lua scripting."),Object(i.b)("h2",{id:"drawbacks"},"Drawbacks"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"This technique should not be used for units which need to perform more than one kind of order each. If a more advanced AI is required, you should check holdout_example's lua ai scripts.  "),Object(i.b)("li",{parentName:"ul"},"Some functionality is hard-coded into this script. If you want to iterate on your game and change the behaviour often, I would suggest having some global constants or loading in the values from an external KV file. Doing this allows you to keep all the values in one place.")),Object(i.b)("h2",{id:"references"},"References"),Object(i.b)("p",null,"I've copied some units from holdout_example for testing, and copied Berserkers Call from ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Pizzalol/SpellLibrary"}),"Spell Library"),". "),Object(i.b)("p",null,"If you need help on making your own units or abilities, Noya's documentation is an excellent resource:",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/articles/datadriven-units"}),"Datadriven Units"),Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/articles/datadriven-ability-breakdown-documentation"}),"DataDriven Ability Breakdown - Documentation")),Object(i.b)("h2",{id:"hammer-setup"},"Hammer Setup"),Object(i.b)("p",null,'In Hammer, I\'ve placed an info_target entity named "spawn_loc_test" which can be found in lua. This allows me to place the units spawn location in Hammer without changing the lua scripts around. If you wish to do this, give each entity a unique name and place them where you want the spawn point on your map.'),Object(i.b)("h2",{id:"lua-setup"},"Lua Setup"),Object(i.b)("p",null,"In the InitGameMode() function we do a few things: seed the random number generator, create an empty table in order to keep track of every unit with behaviour, spawn some units, and set a thinker function up. "),Object(i.b)("p",null,"Settings which aren't relevant to this tutorial have been omitted, but in this function you can set up things like GameRules for your game mode. "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'function CAITesting:InitGameMode()\n    print( "Loading AI Testing Game Mode." )\n    -- SEEDING RNG IS VERY IMPORTANT\n    math.randomseed(Time())\n\n    -- Set up a table to hold all the units we want to spawn\n    self.UnitThinkerList = {}\n\n    -- Spawn some units\n    for i = 1,5 do\n        self:SpawnAIUnitWanderer()\n    end\n    for i = 1,3 do\n        self:SpawnAIUnitCaster()\n    end\n\n    -- Set the unit thinker function\n    GameRules:GetGameModeEntity():SetThink( "OnUnitThink", self, "UnitThink", 1 )\nend\n')),Object(i.b)("h2",{id:"spawning-a-wanderer"},"Spawning a Wanderer"),Object(i.b)("p",null,'This function will spawn a unit with wandering behaviour. The bounds which the unit wanders between are hard coded. An easy way to determine these bounds is to spawn a simple entity in Hammer (such as info_target), move it about and read the coordinates. In this example, my info_target entity is named "spawn_loc_test".'),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'function CAITesting:SpawnAIUnitWanderer()\n    --Start an iteration finding each entity with this name\n    --If you\'ve named everything with a unique name, this will return your entity on the first go\n    local spawnVectorEnt = Entities:FindByName(nil, "spawn_loc_test")\n\n    -- GetAbsOrigin() is a function that can be called on any entity to get its location\n    local spawnVector = spawnVectorEnt:GetAbsOrigin()\n\n    -- Spawn the unit at the location on the neutral team\n    local spawnedUnit = CreateUnitByName("npc_dota_creature_kobold_tunneler", spawnVector, true, nil, nil, DOTA_TEAM_NEUTRALS)\n\n    -- make this unit passive\n    spawnedUnit:SetIdleAcquire(false)\n\n    -- Add some variables to the spawned unit so we know its intended behaviour\n    -- You can store anything here, and any time you get this entity the information will be intact\n    spawnedUnit.ThinkerType = "wander"\n    spawnedUnit.wanderBounds = {}\n    spawnedUnit.wanderBounds.XMin = -768\n    spawnedUnit.wanderBounds.XMax = 768\n    spawnedUnit.wanderBounds.YMin = -64\n    spawnedUnit.wanderBounds.YMax = 768\n\n    -- Add a random amount to the game time to randomise the behaviour a bit\n    spawnedUnit.NextOrderTime = GameRules:GetGameTime() + math.random(5, 10) \n\n    -- finally, insert the unit into the table\n    table.insert(self.UnitThinkerList, spawnedUnit)\nend\n')),Object(i.b)("h2",{id:"spawning-a-caster"},"Spawning a Caster"),Object(i.b)("p",null,"This function will spawn a unit with casting behaviour. The bounds which the unit is spawned in are hard coded. The spell is an untargeted spell which requires no additional variables to cast."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'function CAITesting:SpawnAIUnitCaster()\n    -- Generate a random location inside the neutrals area\n    local spawnVector = Vector(math.random(-768, 768), math.random(-64, 768), 128)\n\n    -- Spawn the unit at the location on the neutral team\n    local spawnedUnit = CreateUnitByName("npc_dota_creature_gnoll_assassin", spawnVector, true, nil, nil, DOTA_TEAM_NEUTRALS)\n\n    -- make this unit passive\n    spawnedUnit:SetIdleAcquire(false)\n\n    -- Add some variables to the spawned unit so we know its intended behaviour\n    -- You can store anything here, and any time you get this entity the information will be intact\n    spawnedUnit.ThinkerType = "caster"\n    spawnedUnit.CastAbilityIndex = spawnedUnit:GetAbilityByIndex(0):entindex()\n\n    -- Add a random amount to the game time to randomise the behaviour a bit\n    spawnedUnit.NextOrderTime = GameRules:GetGameTime() + math.random(5, 10) \n\n    -- finally, insert the unit into the table\n    table.insert(self.UnitThinkerList, spawnedUnit)\nend\n')),Object(i.b)("h2",{id:"thinker-function"},"Thinker Function"),Object(i.b)("p",null,"This function gets called every second. It will read each of the units and determine if they should be issued with a new order, then issue that order."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'function CAITesting:OnUnitThink()\n    if GameRules:State_Get() == DOTA_GAMERULES_STATE_GAME_IN_PROGRESS then\n\n        local deadUnitCount = 0\n\n        -- Check each of the units in this table for their thinker behaviour\n        for ind, unit in pairs(self.UnitThinkerList) do\n\n            -- The first check should be to see if the units are still alive or not.\n            -- Keep track of how many units are removed from the table, as the indices will change by that amount\n            if unit:IsNull() or not unit:IsAlive() then\n                table.remove(self.UnitThinkerList, ind - deadUnitCount)\n                deadUnitCount = deadUnitCount + 1\n\n            -- Check if the game time has passed our random time for next order\n            elseif GameRules:GetGameTime() > unit.NextOrderTime then\n\n                if unit.ThinkerType == "wander" then\n                    --print("thinker unit is a wanderer")\n                    --print("time: " .. GameRules:GetGameTime() .. ". next wander: " .. unit.NextWanderTime)\n\n                    -- Generate random coordinates to wander to\n                    local x = math.random(unit.wanderBounds.XMin, unit.wanderBounds.XMax)\n                    local y = math.random(unit.wanderBounds.YMin, unit.wanderBounds.YMax)\n                    local z = GetGroundHeight(Vector(x, y, 128), nil)\n\n                    print("wandering to x: " .. x .. " y: " .. y)\n\n                    -- Issue the movement order to the unit\n                    unit:MoveToPosition(Vector(x, y, z))\n\n\n                elseif unit.ThinkerType == "caster" then\n\n                    -- If you want a more complicated order, use this syntax\n                    -- Some more documentation: https://developer.valvesoftware.com/wiki/Dota_2_Workshop_Tools/Scripting/API/Global.ExecuteOrderFromTable\n                    -- Unit order list is here: https://developer.valvesoftware.com/wiki/Dota_2_Workshop_Tools/Panorama/Javascript/API#dotaunitorder_t\n                    -- (Ignore the dotaunitorder_t. on each one)\n\n                    print("casting ability " .. EntIndexToHScript(unit.CastAbilityIndex):GetName())\n\n                    local order = {\n                        UnitIndex = unit:entindex(),\n                        AbilityIndex = unit.CastAbilityIndex,\n                        OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,\n                        Queue = false\n                    }\n                    ExecuteOrderFromTable(order)\n                end\n\n                -- Generate the next time for the order\n                unit.NextOrderTime = GameRules:GetGameTime() + math.random(5, 10)\n            end\n        end\n\n        -- Make sure our testing map stays on day time      \n        if not GameRules:IsDaytime() then\n            GameRules:SetTimeOfDay(0.26)\n        end\n\n    elseif GameRules:State_Get() >= DOTA_GAMERULES_STATE_POST_GAME then\n        return nil\n    end\n\n    -- this return statement means that this thinker function will be called again in 1 second\n    -- returning nil will cause the thinker to terminate and no longer be called\n    return 1\nend\n')),Object(i.b)("h2",{id:"finishing-up"},"Finishing Up"),Object(i.b)("p",null,"If you need more advanced behaviour, an AI script should be used. The method covered in this tutorial can be extended up to a point however, for example casting a ground-targeted ability in a random area would be possible using only code posted here."),Object(i.b)("p",null,"The full files for this example can be found here:\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Wigguno/AITesting"}),"https://github.com/Wigguno/AITesting")),Object(i.b)("p",null,"If you have any questions, the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://moddota.com/forums/chat"}),"#dota2modhelpdesk")," irc channel is always happy to help."))}u.isMDXComponent=!0},173:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=i.a.createContext({}),d=function(e){var n=i.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=d(e.components);return i.a.createElement(u.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},p=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(t),p=a,m=c["".concat(o,".").concat(p)]||c[p]||h[p]||r;return t?i.a.createElement(m,s(s({ref:n},u),{},{components:t})):i.a.createElement(m,s({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<r;u++)o[u]=t[u];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},174:function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));var a=t(0),i=t.n(a);function r({id:e,aspectRatio:n=4/3}){return i.a.createElement("p",{style:{position:"relative",paddingBottom:1/n*100+"%"}},i.a.createElement("iframe",{src:"https://gfycat.com/ifr/"+e,scrolling:"no",frameBorder:"0",allowFullScreen:!0,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0}}))}},175:function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));var a=t(0),i=t.n(a);function r({id:e,playlistId:n,aspectRatio:t=16/9}){const a=void 0!==n?"https://www.youtube.com/embed/videoseries?list="+n:"https://www.youtube.com/embed/"+e;return i.a.createElement("p",{style:{position:"relative",paddingBottom:1/t*100+"%"}},i.a.createElement("iframe",{src:a,frameBorder:"0",allowFullScreen:!0,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0}}))}}}]);