(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{153:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var r=n(2),a=(n(0),n(192));n(184),n(185),n(193),n(194),n(195),n(196);const i={title:"Using the order filter and other filters",author:"Perry",steamId:"76561198046986723",date:"26.06.2016"},o={id:"scripting/using-dota-filters",isDocsHomePage:!1,title:"Using the order filter and other filters",description:"Filters in general",source:"@site/_articles/scripting/using-dota-filters.md",permalink:"/scripting/using-dota-filters",editUrl:"https://github.com/ModDota/moddota.github.io/edit/source/_articles/scripting/using-dota-filters.md",sidebar:"tutorials",previous:{title:"Lava damage",permalink:"/scripting/lava-damage"},next:{title:"Particle Attachment",permalink:"/scripting/particle-attachment"}},l=[{value:"Filters in general",id:"filters-in-general",children:[]},{value:"The general idea",id:"the-general-idea",children:[]},{value:"Filters in Lua",id:"filters-in-lua",children:[]},{value:"Example 1: Disabling glyph",id:"example-1-disabling-glyph",children:[]},{value:"Example 2: Order modification",id:"example-2-order-modification",children:[]}],s={rightToc:l};function c({components:e,...t}){return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"filters-in-general"},"Filters in general"),Object(a.b)("p",null,"This tutorial explains the use of the different filter functions currentlly in the API, and illustrates this using a small example in the order filter."),Object(a.b)("p",null,"There are currently 9 filters available in the lua API, namely:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"AbilityTuningFilter")," - Filters abilities and all values they use on cast."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"BountyRunePickupFilter")," - Filters bounty rune pickups."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"DamageFilter")," - Filters damage events."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"ExecuteOrderFilter")," - Filters orders (usually given by players)."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"ModifierGainedFilter")," - Filters modifiers events when they are first applied to a unit."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"ModifyExperienceFilter")," - Filters modifications of experience."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"ModifyGoldFilter")," - Filters modifications of gold."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"RuneSpawnFilter")," - Filters rune spawns."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"TrackingProjectileFilter")," - Filters tracking projectile launches.")),Object(a.b)("p",null,"These filters are set using functions like ",Object(a.b)("inlineCode",{parentName:"p"},"CDOTABaseGameMode:SetExecuteOrderFilter(function, context)"),", check the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/TypeScriptToLua/Dota2Declarations/blob/master/dota-api.d.ts#L1193"}),"API declarations")," for the exact function name for each function. The filters can then be cleared again using functions like ",Object(a.b)("inlineCode",{parentName:"p"},"CDOTABaseGameMode:ClearExecuteOrderFilter()")," and similar functions - again, see the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/TypeScriptToLua/Dota2Declarations/blob/master/dota-api.d.ts#L1193"}),"API declarations")," ."),Object(a.b)("h2",{id:"the-general-idea"},"The general idea"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"(This is the most important section of this entire tutorial)")),Object(a.b)("p",null,"The Source 2 engine listens for events, either generated by players or units in the game. The engine has a lot of handlers that determine what to do when a certain event is received. Filters get to look at these events before they reach the engine and have the opportunity to decide not to deliver the event, or maybe to deliver a modified version of the event."),Object(a.b)("p",null,"An analogy to explain this is that of a company receiving mail. The regular situation would be the company(the engine) receiving mail (events) and reading them as usual. Now imagine a new secretary is hired(the filter) that reads every letter received and decides if the letter is important enough to be handled or not. This system is illustrated in the following picture:"),Object(a.b)("p",null,Object(a.b)("img",Object(r.a)({parentName:"p"},{src:"https://i.imgur.com/Op4u0Oa.png",alt:"Filtering visualized"}))),Object(a.b)("h2",{id:"filters-in-lua"},"Filters in Lua"),Object(a.b)("p",null,"So now we know how filters work, how do we use them. This explanation will use the ",Object(a.b)("inlineCode",{parentName:"p"},"ExecuteOrderFilter"),", keep in mind that all filters use the same basic idea."),Object(a.b)("p",null,"The first step is to set the filter using the ",Object(a.b)("inlineCode",{parentName:"p"},"CDOTABaseGameMode:SetExecuteOrderFilter(function, context)")," API call. Let's analyze what this function expects. There are two parameters:"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Parameter: function")," - The filter function. This function is your actual filter. It is called every time the event you are filtering is called (in this case when an order arrives). The filter function receives two parameters: ",Object(a.b)("strong",{parentName:"p"},"self")," and ",Object(a.b)("strong",{parentName:"p"},"event"),". The ",Object(a.b)("strong",{parentName:"p"},"self")," parameter is just the context of the function (and is hidden if you use Dynamic_Wrap and the : operator). The really interesting parameter is the ",Object(a.b)("strong",{parentName:"p"},"event")," parameter. This parameter contains all the data of the event. Your filter function should look at this function and make a decision. There are three possible outcomes:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"You want to do nothing and accept the event, you ",Object(a.b)("inlineCode",{parentName:"li"},"return true"),"."),Object(a.b)("li",{parentName:"ol"},"You want to reject the event, it will be like this event never happened, ",Object(a.b)("inlineCode",{parentName:"li"},"return false"),"."),Object(a.b)("li",{parentName:"ol"},"You want to accept the event with some changes, all you have to do ",Object(a.b)("strong",{parentName:"li"},"modify the event table")," and ",Object(a.b)("inlineCode",{parentName:"li"},"return true"),".")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Parameter: context")," - This parameter is what is passed into the filter function as ",Object(a.b)("strong",{parentName:"p"},"self"),"."),Object(a.b)("h2",{id:"example-1-disabling-glyph"},"Example 1: Disabling glyph"),Object(a.b)("p",null,"Time to put into practice what we just used. We know the glyph is an order given by a player, so we should use the order filter to disable it. All we have to do is find any glyph orders and return false. Of course you can add any restriction you want based on the contents of the event parameter. Just ",Object(a.b)("inlineCode",{parentName:"p"},"DeepPrintTable( event )")," to see what data is available to you."),Object(a.b)("p",null,"To check which order types there are, look at the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://dota.tools/vscripts/dotaunitorder_t"}),"API"),"."),Object(a.b)("p",null,"Note that in this example the : operator on ",Object(a.b)("inlineCode",{parentName:"p"},"GameMode:OrderFilter")," hides the first (",Object(a.b)("inlineCode",{parentName:"p"},"self"),") parameter."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-lua"}),'--First set the filter to start catching events, usually this is in your init\nGameRules:GetGameModeEntity():SetExecuteOrderFilter(Dynamic_Wrap(GameMode, "OrderFilter"), self)\n\n--......................\n\n--Add the order filter to your game mode entity\nfunction GameMode:OrderFilter(event)\n    --Check if the order is the glyph type\n    if event.order_type == DOTA_UNIT_ORDER_GLYPH then\n        return false\n    end\n\n    --Return true by default to keep all other orders the same\n    return true\nend\n')),Object(a.b)("h2",{id:"example-2-order-modification"},"Example 2: Order modification"),Object(a.b)("p",null,"This example mimics a sort of 'drunk' state of a unit by adding a random offset to any movement orders. The code is pretty easy, all you have to do is modify the incoming order and return true."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-lua"}),'--First set the filter to start catching events, usually this is in your init\nGameRules:GetGameModeEntity():SetExecuteOrderFilter(Dynamic_Wrap(GameMode, "OrderFilter"), self)\n\n--......................\n\n--Add the order filter to your game mode entity\nfunction GameMode:OrderFilter(event)\n    --Check if the order is the glyph type\n    if event.order_type == DOTA_UNIT_ORDER_MOVE_TO_POSITION then\n        local offsetVector = RandomVector(100)\n        event.position_x = event.position_x + offsetVector.x\n        event.position_y = event.position_y + offsetVector.y\n        return true\n    end\n\n    --Return true by default to keep all other orders the same\n    return true\nend\n')))}c.isMDXComponent=!0},184:function(e,t,n){"use strict";var r=n(0),a=n.n(r),i=n(191),o=n(188),l=n(90),s=n.n(l);const c=37,u=39;t.a=function(e){const{block:t,children:n,defaultValue:l,values:p,groupId:d}=e,{tabGroupChoices:b,setTabGroupChoices:m}=Object(i.a)(),[f,h]=Object(r.useState)(l);if(null!=d){const e=b[d];null!=e&&e!==f&&p.some(t=>t.value===e)&&h(e)}const g=e=>{h(e),null!=d&&m(d,e)},O=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":t})},p.map(({value:e,label:t})=>a.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":f===e,className:Object(o.a)("tabs__item",s.a.tabItem,{"tabs__item--active":f===e}),key:e,ref:e=>O.push(e),onKeyDown:e=>((e,t,n)=>{switch(n.keyCode){case u:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case c:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(O,e.target,e),onFocus:()=>g(e),onClick:()=>g(e)},t))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(n).filter(e=>e.props.value===f)[0]))}},185:function(e,t,n){"use strict";var r=n(0),a=n.n(r);t.a=function(e){return a.a.createElement("div",null,e.children)}},186:function(e,t,n){"use strict";var r=n(0),a=n(34);t.a=function(){return Object(r.useContext)(a.a)}},187:function(e,t,n){"use strict";function r(e){return!1===/^(https?:|\/\/|mailto:|tel:)/.test(e)}n.d(t,"a",(function(){return r}))},188:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},189:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(186),a=n(187);function i(e,{forcePrependBaseUrl:t=!1,absolute:n=!1}={}){const{siteConfig:{baseUrl:i="/",url:o}={}}=Object(r.a)();if(!e)return e;if(t)return i+e;if(!Object(a.a)(e))return e;const l=i+e.replace(/^\//,"");return n?o+l:l}},190:function(e,t,n){"use strict";var r=n(0);const a=Object(r.createContext)({tabGroupChoices:{},setTabGroupChoices:()=>{},isAnnouncementBarClosed:!1,closeAnnouncementBar:()=>{}});t.a=a},191:function(e,t,n){"use strict";var r=n(0),a=n(190);t.a=function(){return Object(r.useContext)(a.a)}},192:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),u=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),b=r,m=p["".concat(o,".").concat(b)]||p[b]||d[b]||i;return n?a.a.createElement(m,l(l({ref:t},c),{},{components:n})):a.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},193:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0),a=n.n(r);function i({id:e,aspectRatio:t=4/3,hd:n="0"}){return a.a.createElement("p",{style:{position:"relative",paddingBottom:1/t*100+"%"}},a.a.createElement("iframe",{src:`https://gfycat.com/ifr/${e}?hd=${n}`,scrolling:"no",frameBorder:"0",allowFullScreen:!0,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0}}))}},194:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(0),a=n.n(r);function i({id:e,playlistId:t,aspectRatio:n=16/9}){const r=void 0!==t?"https://www.youtube.com/embed/videoseries?list="+t:"https://www.youtube.com/embed/"+e;return a.a.createElement("p",{style:{position:"relative",paddingBottom:1/n*100+"%"}},a.a.createElement("iframe",{src:r,frameBorder:"0",allowFullScreen:!0,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0}}))}},195:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(3),a=n(185),i=n(184),o=n(0),l=n.n(o);const s={lua:"Lua",ts:"TypeScript",tsx:"TypeScript",js:"JavaScript",jsx:"JavaScript"};function c({children:e,group:t}){Object(r.a)("string"==typeof t||null===t);const n=l.a.Children.toArray(e).map(e=>{const t=e.props.children.props.className.replace(/language-/,"");return Object(r.a)(t in s),{language:t,element:e}});return l.a.createElement(i.a,{groupId:null!==t?"multi-code-block-"+t:void 0,defaultValue:n[0].language,values:n.map(({language:e})=>({value:e,label:s[e]}))},n.map(({language:e,element:t})=>l.a.createElement(a.a,{key:e,value:e},t)))}},196:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(189),a=n(0),i=n.n(a);function o({path:e,controls:t=!1}){return i.a.createElement("video",{width:"100%",height:"100%",autoPlay:!0,muted:!0,loop:!0,controls:t},i.a.createElement("source",{src:Object(r.a)(e),type:"video/mp4"}))}}}]);