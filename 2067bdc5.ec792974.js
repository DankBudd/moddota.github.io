(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{113:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return m}));var a=n(2),r=(n(0),n(186)),o=n(181),s=n(182),l=(n(187),n(188),n(189));const i={title:"React in Panorama",author:"ark120202"},c={id:"panorama/react",isDocsHomePage:!1,title:"React in Panorama",description:"React is a JavaScript library for building user interfaces. It allows you to break down UI into small reusable building blocks (components) and simplifies state management.",source:"@site/_articles/panorama/react.md",permalink:"/panorama/react",editUrl:"https://github.com/ModDota/moddota.github.io/edit/source/_articles/panorama/react.md",sidebar:"tutorials",previous:{title:"Bundling scripts with webpack",permalink:"/panorama/webpack"},next:{title:"Asset File Type Reference",permalink:"/assets/asset-file-type-reference"}},u=[{value:"Installation",id:"installation",children:[]},{value:"JSX",id:"jsx",children:[]},{value:"Components",id:"components",children:[]},{value:"State",id:"state",children:[]},{value:"Listening to events",id:"listening-to-events",children:[{value:"Custom hooks",id:"custom-hooks",children:[]}]},{value:"Next Steps",id:"next-steps",children:[]}],p={rightToc:u};function m({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"React is a JavaScript library for building user interfaces. It allows you to break down UI into small reusable building blocks (components) and simplifies state management."),Object(r.b)("p",null,"Usually React is used for building websites and web applications, but ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ark120202/react-panorama"}),Object(r.b)("inlineCode",{parentName:"a"},"react-panorama"))," allows you to use the power of React in Dota 2."),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,"To avoid wasting time on configuration, it's recommended to start with the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ark120202/dota-templates/tree/webpack-react"}),"JavaScript")," or ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ark120202/dota-templates/tree/webpack-typescript-react"}),"TypeScript")," templates, even if you're integrating it into an existing project."),Object(r.b)("p",null,"Alternatively, if you want to configure build tools yourself, or you want to use it without any build steps (UMD), you can check out ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ark120202/react-panorama#installation"}),Object(r.b)("inlineCode",{parentName:"a"},"react-panorama")," installation guide"),"."),Object(r.b)("h2",{id:"jsx"},"JSX"),Object(r.b)("p",null,"Here's a basic hello-world application built with React:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { render } from 'react-panorama';\n\nrender(<Label text=\"Hello, world!\" />, $.GetContextPanel());\n")),Object(r.b)("p",null,"The first parameter that gets passed to the ",Object(r.b)("inlineCode",{parentName:"p"},"render")," function is a tree of components constructed using JSX - an extension to the JavaScript syntax."),Object(r.b)("p",null,"JSX tree is a regular JavaScript expression, just like a string, or object literal. That means you can manipulate it like any regular JS value - store it in variables, use it in conditions, or return it from functions."),Object(r.b)("p",null,"For more information about JSX you can check out ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/introducing-jsx.html"}),"official React documentation"),"."),Object(r.b)("h2",{id:"components"},"Components"),Object(r.b)("p",null,"Instead of having all your UI in a monolithic XML file, React encourages you to split functionality into small building blocks - components."),Object(r.b)("p",null,"In React, components are simple functions that return JSX:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { render } from 'react-panorama';\n\nfunction App() {\n  return <Label text=\"Hello, world!\" />;\n}\n\nrender(<App />, $.GetContextPanel());\n")),Object(r.b)("p",null,"Components can accept parameters as a function argument:"),Object(r.b)(l.a,{group:"panorama",mdxType:"MultiCodeBlock"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"ts2js=panorama",ts2js:"panorama"}),"import React from 'react';\nimport { render } from 'react-panorama';\n\n// highlight-next-line\nfunction HeroRow({ heroName }) {\n  return (\n    <Panel style={{ flowChildren: 'right' }}>\n      <DOTAHeroImage heroimagestyle=\"icon\" heroname={heroName} />\n      <Label style={{ marginLeft: '5px' }} localizedText={heroName} />\n    </Panel>\n  );\n}\n\nfunction HeroList() {\n  return (\n    <Panel style={{ flowChildren: 'down' }}>\n      {/* highlight-start */}\n      <HeroRow heroName=\"npc_dota_hero_abaddon\" />\n      <HeroRow heroName=\"npc_dota_hero_abyssal_underlord\" />\n      <HeroRow heroName=\"npc_dota_hero_alchemist\" />\n      {/* highlight-end */}\n    </Panel>\n  );\n}\n\nrender(<HeroList />, $.GetContextPanel());\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx",metastring:"ts2js=panorama",ts2js:"panorama"}),"import React from 'react';\nimport { render } from 'react-panorama';\n\n// highlight-next-line\nfunction HeroRow({ heroName }: { heroName: string }) {\n  return (\n    <Panel style={{ flowChildren: 'right' }}>\n      <DOTAHeroImage heroimagestyle=\"icon\" heroname={heroName} />\n      <Label style={{ marginLeft: '5px' }} localizedText={heroName} />\n    </Panel>\n  );\n}\n\nfunction HeroList() {\n  return (\n    <Panel style={{ flowChildren: 'down' }}>\n      {/* highlight-start */}\n      <HeroRow heroName=\"npc_dota_hero_abaddon\" />\n      <HeroRow heroName=\"npc_dota_hero_abyssal_underlord\" />\n      <HeroRow heroName=\"npc_dota_hero_alchemist\" />\n      {/* highlight-end */}\n    </Panel>\n  );\n}\n\nrender(<HeroList />, $.GetContextPanel());\n"))),Object(r.b)("h2",{id:"state"},"State"),Object(r.b)("p",null,"In modern React applications, state is usually managed using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/hooks-intro.html"}),"hooks"),". One of the basic hooks, ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/hooks-state.html"}),Object(r.b)("inlineCode",{parentName:"a"},"useState")),", allows you to declare a component-scoped variable, which re-renders the component every time its value gets changed. Here's a basic counter example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React, { useState } from 'react';\nimport { render } from 'react-panorama';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const increment = () => setCount(count + 1);\n\n  return (\n    <Panel style={{ flowChildren: 'down' }}>\n      <Label text={`Count: ${count}`} />\n      <TextButton className=\"ButtonBevel\" text=\"Increment\" onactivate={increment} />\n    </Panel>\n  );\n}\n\nrender(<Counter />, $.GetContextPanel());\n")),Object(r.b)("p",null,"Similarly, you can use ",Object(r.b)("inlineCode",{parentName:"p"},"useState")," to bind state to input elements:"),Object(r.b)(o.a,{defaultValue:"ToggleButton",values:[{label:"ToggleButton",value:"ToggleButton"},{label:"Slider",value:"Slider"},{label:"TextEntry",value:"TextEntry"}],mdxType:"Tabs"},Object(r.b)(s.a,{value:"ToggleButton",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React, { useState } from 'react';\nimport { render } from 'react-panorama';\n\nfunction ConditionalRendering() {\n  const [showDetails, setShowDetails] = useState(false);\n\n  return (\n    <Panel style={{ flowChildren: 'down' }}>\n      <ToggleButton\n        text=\"Show details\"\n        selected={showDetails}\n        onactivate={() => setShowDetails(!showDetails)}\n      />\n\n      {showDetails && <Label text=\"Details!\" />}\n    </Panel>\n  );\n}\n\nrender(<ConditionalRendering />, $.GetContextPanel());\n"))),Object(r.b)(s.a,{value:"Slider",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React, { useState } from 'react';\nimport { render } from 'react-panorama';\n\nfunction ColorPicker() {\n  const [red, setRed] = useState(0.5);\n  const [green, setGreen] = useState(0.5);\n  const [blue, setBlue] = useState(0.5);\n\n  return (\n    <Panel style={{ flowChildren: 'right' }}>\n      <Slider value={red} onvaluechanged={(p) => setRed(p.value)} />\n      <Slider value={green} onvaluechanged={(p) => setGreen(p.value)} />\n      <Slider value={blue} onvaluechanged={(p) => setBlue(p.value)} />\n      <Panel\n        style={{\n          backgroundColor: `rgb(${red * 255}, ${green * 255}, ${blue * 255})`,\n          width: '125px',\n          height: '125px',\n        }}\n      />\n    </Panel>\n  );\n}\n\nrender(<ColorPicker />, $.GetContextPanel());\n"))),Object(r.b)(s.a,{value:"TextEntry",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React, { useState } from 'react';\nimport { render } from 'react-panorama';\n\nfunction ReservedText() {\n  const [text, setText] = useState('');\n\n  return (\n    <Panel style={{ flowChildren: 'down' }}>\n      <TextEntry text={text} ontextentrychange={(p) => setText(p.text)} />\n      <Label text={`Reversed text: ${[...text].reverse().join('')}`} />\n    </Panel>\n  );\n}\n\nrender(<ReservedText />, $.GetContextPanel());\n")))),Object(r.b)("h2",{id:"listening-to-events"},"Listening to events"),Object(r.b)("p",null,"In React, the only things that should affect what component shows are its props and state. So, in order to make component update data when a certain game event happens, you need to make event listener update component's state."),Object(r.b)("p",null,"Since we can update component state only within the component itself, we also have to put our ",Object(r.b)("inlineCode",{parentName:"p"},"GameEvents.Subscribe")," call inside the component. However you can't register it in the render function itself, because it gets executed more often than we need to, since we need to register our listener only when the component gets mounted for the first time. That's when we have to use another builtin hook - ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/hooks-effect.html"}),Object(r.b)("inlineCode",{parentName:"a"},"useEffect")),"."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"useEffect")," hook is a function that usually gets called with 2 parameters. First one is the callback we want to execute, which would register our listener. The second is the list of state variable that our . Since we don't use any state for our listener, we can just use an empty array (",Object(r.b)("inlineCode",{parentName:"p"},"[]"),"). Also, optionally our callback can return a cleanup function, which is called either when one of dependencies changes, or when component gets unmounted."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React, { useEffect, useState } from 'react';\nimport { render } from 'react-panorama';\n\nfunction KDA() {\n  const [kills, setKills] = useState(() => Game.GetLocalPlayerInfo().player_kills);\n  const [deaths, setDeaths] = useState(() => Game.GetLocalPlayerInfo().player_deaths);\n  const [assists, setAssists] = useState(() => Game.GetLocalPlayerInfo().player_assists);\n\n  // highlight-start\n  useEffect(() => {\n    const handle = GameEvents.Subscribe('dota_player_kill', () => {\n      const playerInfo = Game.GetLocalPlayerInfo();\n      setKills(playerInfo.player_kills);\n      setDeaths(playerInfo.player_deaths);\n      setAssists(playerInfo.player_assists);\n    });\n\n    return () => GameEvents.Unsubscribe(handle);\n  }, []);\n  // highlight-end\n\n  return <Label style={{ color: 'white' }} text={`KDA: ${kills}/${deaths}/${assists}`} />;\n}\n\nrender(<KDA />, $.GetContextPanel());\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"react-panorama")," provides a custom hook that makes listening to game events a little easier:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React, { useState } from 'react';\nimport { render, useGameEvent } from 'react-panorama';\n\nfunction KDA() {\n  const [kills, setKills] = useState(() => Game.GetLocalPlayerInfo().player_kills);\n  const [deaths, setDeaths] = useState(() => Game.GetLocalPlayerInfo().player_deaths);\n  const [assists, setAssists] = useState(() => Game.GetLocalPlayerInfo().player_assists);\n  // highlight-start\n  useGameEvent('dota_player_kill', () => {\n    const playerInfo = Game.GetLocalPlayerInfo();\n    setKills(playerInfo.player_kills);\n    setDeaths(playerInfo.player_deaths);\n    setAssists(playerInfo.player_assists);\n  }, []);\n  // highlight-end\n\n  return <Label style={{ color: 'white' }} text={`KDA: ${kills}/${deaths}/${assists}`} />;\n}\n\nrender(<KDA />, $.GetContextPanel());\n")),Object(r.b)("p",null,"Just like that, you can listen to UI events, custom net table updates, or just time passing. ",Object(r.b)("inlineCode",{parentName:"p"},"react-panorama")," provides ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/ark120202/react-panorama#hooks"}),"a few more custom hooks")," for common use cases."),Object(r.b)("h3",{id:"custom-hooks"},"Custom hooks"),Object(r.b)("p",null,"One of things that React Hooks make easier is code reuse. For example, we can extract logic used to listen to KDA changes into a custom ",Object(r.b)("inlineCode",{parentName:"p"},"useKDA")," hook."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React, { useState } from 'react';\nimport { render, useGameEvent } from 'react-panorama';\n\n// highlight-next-line\nfunction useKDA() {\n  // Since both initializing and updating state is the same process,\n  // we can extract it into a regular function\n  function getKDA() {\n    const playerInfo = Game.GetLocalPlayerInfo();\n    return {\n      kills: playerInfo.player_kills,\n      deaths: playerInfo.player_deaths,\n      assists: playerInfo.player_assists,\n    };\n  }\n\n  const [kda, setKDA] = useState(getKDA);\n\n  useGameEvent('dota_player_kill', () => setKDA(getKDA()), []);\n\n  return kda;\n}\n\nfunction KDA() {\n  // highlight-next-line\n  const { kills, deaths, assists } = useKDA();\n\n  return <Label style={{ color: 'white' }} text={`KDA: ${kills}/${deaths}/${assists}`} />;\n}\n\nfunction KDARatio() {\n  // highlight-next-line\n  const { kills, deaths, assists } = useKDA();\n  const ratio = (kills + assists) / (deaths || 1);\n\n  return <Label style={{ color: 'white' }} text={`KDA Ratio: ${ratio}`} />;\n}\n\nfunction App() {\n  return (\n    <Panel style={{ flowChildren: 'down' }}>\n      <KDA />\n      <KDARatio />\n    </Panel>\n  );\n}\n\nrender(<App />, $.GetContextPanel());\n")),Object(r.b)("h2",{id:"next-steps"},"Next Steps"),Object(r.b)("p",null,"This tutorial have covered only basics of React. React has a large ecosystem of libraries, patterns and articles, lots of which would apply to Panorama. As a starting point you can check out ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/"}),"the official React website")," (although some parts of it are ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/reactjs/reactjs.org/issues/1782"}),"a little")," ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/reactjs/reactjs.org/issues/1788"}),"outdated"),")."))}m.isMDXComponent=!0},181:function(e,t,n){"use strict";var a=n(0),r=n.n(a),o=n(185),s=n(183),l=n(90),i=n.n(l);const c=37,u=39;t.a=function(e){const{block:t,children:n,defaultValue:l,values:p,groupId:m}=e,{tabGroupChoices:b,setTabGroupChoices:d}=Object(o.a)(),[h,f]=Object(a.useState)(l);if(null!=m){const e=b[m];null!=e&&e!==h&&p.some(t=>t.value===e)&&f(e)}const g=e=>{f(e),null!=m&&d(m,e)},y=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":t})},p.map(({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":h===e,className:Object(s.a)("tabs__item",i.a.tabItem,{"tabs__item--active":h===e}),key:e,ref:e=>y.push(e),onKeyDown:e=>((e,t,n)=>{switch(n.keyCode){case u:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case c:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(y,e.target,e),onFocus:()=>g(e),onClick:()=>g(e)},t))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter(e=>e.props.value===h)[0]))}},182:function(e,t,n){"use strict";var a=n(0),r=n.n(a);t.a=function(e){return r.a.createElement("div",null,e.children)}},183:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},184:function(e,t,n){"use strict";var a=n(0);const r=Object(a.createContext)({tabGroupChoices:{},setTabGroupChoices:()=>{},isAnnouncementBarClosed:!1,closeAnnouncementBar:()=>{}});t.a=r},185:function(e,t,n){"use strict";var a=n(0),r=n(184);t.a=function(){return Object(a.useContext)(r.a)}},186:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),b=a,d=p["".concat(s,".").concat(b)]||p[b]||m[b]||o;return n?r.a.createElement(d,l(l({ref:t},c),{},{components:n})):r.a.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=b;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},187:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var a=n(0),r=n.n(a);function o({id:e,aspectRatio:t=4/3}){return r.a.createElement("p",{style:{position:"relative",paddingBottom:1/t*100+"%"}},r.a.createElement("iframe",{src:"https://gfycat.com/ifr/"+e,scrolling:"no",frameBorder:"0",allowFullScreen:!0,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0}}))}},188:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var a=n(0),r=n.n(a);function o({id:e,playlistId:t,aspectRatio:n=16/9}){const a=void 0!==t?"https://www.youtube.com/embed/videoseries?list="+t:"https://www.youtube.com/embed/"+e;return r.a.createElement("p",{style:{position:"relative",paddingBottom:1/n*100+"%"}},r.a.createElement("iframe",{src:a,frameBorder:"0",allowFullScreen:!0,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0}}))}},189:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var a=n(3),r=n(182),o=n(181),s=n(0),l=n.n(s);const i={ts:"TypeScript",tsx:"TypeScript",js:"JavaScript",jsx:"JavaScript"};function c({children:e,group:t}){Object(a.a)("string"==typeof t||null===t);const n=l.a.Children.toArray(e).map(e=>{const t=e.props.children.props.className.replace(/language-/,"");return Object(a.a)(t in i),{language:t,element:e}});return l.a.createElement(o.a,{groupId:null!==t?"multi-code-block-"+t:void 0,defaultValue:n[0].language,values:n.map(({language:e})=>({value:e,label:i[e]}))},n.map(({language:e,element:t})=>l.a.createElement(r.a,{key:e,value:e},t)))}}}]);